using System;
using MATO.Classes;
using MATO.DataModel;
using MATO.NET.Interfaces;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using System.Web.Security;
using MATO.DataModel.Migrations;
using MATO.NET.Persistence;
using MATO.NET.ViewModels;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.EntityFramework;
using WebGrease.Css.Extensions;

namespace MATO.NET.Services
{
    public class AdminService : IAdminService
    {
        private readonly MATOContext context;
        public IUserService UserService { get; private set; }
        public IRequestsService RequestsService { get; private set; }

        public AdminService(MATOContext _context)
        {
            context = _context;
            UserService = new UserService(context);
            RequestsService = new RequestsService(context);
        }

        public List<Region> GetRegions()
        {
            return context.Region.OrderBy(r => r.Name).ToList();
        }

        public Region GetRegionById(int id)
        {
            return context.Region.FirstOrDefault(r => r.Id == id);
        }

        public string GetRegionalManagerByRegionId(int id)
        {
            var user = context.Region.Include("RegionalManager").FirstOrDefault(a => a.Id == id);
            return user.RegionalManagerId;
        }

        public List<IdentityRole> GetUserRoles()
        {
            var roleStore = new RoleStore<IdentityRole>(context);
            var roleManager = new RoleManager<IdentityRole>(roleStore);
            var roles = roleManager.Roles.ToList();
            return roles;
        }

        public IdentityRole GetRoleById(string id)
        {
            return context.Roles.FirstOrDefault(r => r.Id == id);
        }

        public IdentityRole GetRoleByName(string name)
        {
            return context.Roles.FirstOrDefault(r => r.Name == name);
        }

        public MultiSelectList GetAuthorsForMultiSelect()
        {
            var role = GetRoleById("44f2d63c-a597-46b0-8dc6-cdb4948fae90");
            MultiSelectList authors = new MultiSelectList(context.Users.ToList().OrderBy(i => i.FullName), "Id", "FullName");
            return authors;
        }

        public Region CreateRegion(CreateRegionViewModel model)
        {
            Region r = new Region
            {
                Name = model.Name,
                RegionalManagerId = model.SelectedManagerId,
                Active = true
            };
            context.Region.Add(r);
            return r;
        }

        public Calendar GetAuthorCalendar(string id)
        {
            return context.Calendar.FirstOrDefault(c => c.Author.Id == id);
        }

        public Calendar CreateCalendarForAuthor(string id, string data)
        {
            var author = context.Users.FirstOrDefault(u => u.Id == id);

            Calendar c = new Calendar
            {
                Author = author,
                Data = data
            };

            context.Calendar.Add(c);
            return c;
        }

        public Calendar UpdateCalendarForAuthor(string id, string data)
        {
            var author = context.Users.FirstOrDefault(u => u.Id == id);
            var calendar = context.Calendar.FirstOrDefault(c => c.Author.Id == author.Id);

            if (calendar != null)
            {
                calendar.Data = data;
                return calendar;
            }
            else
            {
                Calendar c = new Calendar { Data = data };
                return c;
            }
        }

        public Calendar GetCalendarForAuthor(string id)
        {
            return context.Calendar.FirstOrDefault(c => c.Author.Id == id);
        }

        public PromotedTitle CreateTitle(CreateTitleViewModel model)
        {
            PromotedTitle title = new PromotedTitle
            {
                Name = model.Name,
                TargetSector = RequestsService.GetTargetSectorById(Int32.Parse(model.SelectedTargetSectorId)),
                Active = true,
            };

            foreach (var a in model.SelectedAuthorIds)
            {
                TitleAuthorAssociation tas = new TitleAuthorAssociation
                {
                    Author = UserService.GetUserById(a),
                    Title = title,
                };

                context.TitleAuthorAssociation.Add(tas);
            }

            context.PromotedTitle.Add(title);

            return title;
        }

        public List<EventType> GetEventTypes()
        {
            return context.EventTypes.OrderBy(e => e.Name).ToList();
        }

        public EventType ToggleEventType(int id)
        {
            var eventType = context.EventTypes.FirstOrDefault(e => e.Id == id);
            eventType.Active = !eventType.Active;

            return eventType;
        }

        public EventType AddEventType(string name)
        {
            EventType e = new EventType
            {
                Name = name,
                Active = true
            };

            context.EventTypes.Add(e);
            return e;
        }

        public TargetSector ToggleTargetSector(int id)
        {
            var targetSector = context.TargetSector.FirstOrDefault(e => e.Id == id);
            targetSector.Active = !targetSector.Active;

            return targetSector;
        }

        public TargetSector AddTargetSector(string name)
        {
            TargetSector e = new TargetSector
            {
                Name = name,
                Active = true
            };

            context.TargetSector.Add(e);
            return e;
        }

        public TalkType AddTalkType(string name)
        {
            TalkType e = new TalkType
            {
                Name = name,
                Active = true
            };

            context.TalkType.Add(e);
            return e;
        }

        public TalkType ToggleTalkType(int id)
        {
            var talkType = context.TalkType.FirstOrDefault(e => e.Id == id);
            talkType.Active = !talkType.Active;

            return talkType;
        }


        public List<EmailTemplates> GetEmailTemplates()
        {
            return context.EmailTemplates.OrderBy(e => e.Name).ToList();
        }

        public EmailTemplates GetEmailTemplateById(int id)
        {
            return context.EmailTemplates.FirstOrDefault(r => r.Id == id);
        }

        public Calendar DeleteCalendarEvent(string title, AppUser user)
        {
            var cal = context.Calendar.FirstOrDefault(c => c.Author.Id == user.Id);
            JavaScriptSerializer jsSerializer = new JavaScriptSerializer();
            var cevents = jsSerializer.Deserialize<List<CalendarEvent>>(cal.Data);

            foreach (var c in cevents.ToList())
            {
                if (c.title == title)
                {
                    cevents.Remove(c);
                }
            }

            var json = new JavaScriptSerializer().Serialize(cevents);
            cal.Data = json;
            cal.Author = user;

            return cal;
        }

        public Region UpdateRegion(ModifyRegionViewModel model)
        {
            var regionId = Int32.Parse(model.SelectedRegionId);
            var region = context.Region.FirstOrDefault(r => r.Id == regionId);

            region.Name = model.Name;
            region.RegionalManagerId = model.SelectedManagerId;
            return region;
        }

        public PromotedTitle GetTitleById(int id)
        {
            return context.PromotedTitle.Include("TargetSector").FirstOrDefault(t => t.Id == id);
        }

        public List<AppUser> GetAuthorsByTitleId(int id)
        {
            var title = context.PromotedTitle.FirstOrDefault(t => t.Id == id);
            var authors = context.TitleAuthorAssociation.Include("Author").Where(t => t.Title.Id == title.Id).ToList();

            var users = new List<AppUser>();
            foreach (var a in authors)
            {
                var user = context.Users.FirstOrDefault(u => u.Id == a.Author.Id);
                users.Add(user);
            }

            return users;
        }

        public void UpdateTitle(PromotedTitle title, string name, string targetSector, string authors)
        {

        }
    }
}